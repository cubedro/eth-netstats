//- index.jade
extends ./layout.jade

block content
  section#header
    .container
      .row.padding-top
        img.col-xs-push-2.col-xs-8.col-sm-push-4.col-sm-4(src="kowala-zygote-testnet.svg")
      .row.padding-top
        h3.col-xs-12.text-center A blockchain for testing the Kowala Protocol, kCoins and mTokens.
  section#text
    .container.content
      .row
        .col-xs-12
          .alert.alert-info <strong>This is a work in progress!</strong> We're actively improving the network, and it may sometimes be unstable or behave in unexpected ways.
      .row
        .col-xs-12
          h4 What is the Zygote Testnet?
          p The Zygote testnet is a sandbox blockchain for testing and experimenting with our flagship stablecoin, kUSD. It's an evolving technology demo which showcases some of things that will be possible with the Kowala Protocol. You can spin up your own node and connect to the network and see how the network is performing using the dashboard. It's also possible to hold and transfer mining tokens.
          p kUSD is currently in a pre-release state, but we intend for the Zygote network to be a permanently stable release candidate for the network. In other words, it will always includ the bleeding-edge features of the Kowala Protocl before they're released.
        .col-xs-12
          h4 Connecting to the Zygote Testnet via the console
          p While we're working on our wallet app, you can connect to the testnet using node console provided by the kUSD mining client. We reccomend that you use the official kUSD Docker image, but advanced users are of course free to download the latest stable binaries and use those. This guide assumes the use of the Docker image.
          p The first step is to <a href="https://www.docker.com/community-edition" target="_blank">install Docker</a> if you don't already have it installed. There are Linux, Mac and Windows versions available. Docker is a virtualization system that allows software compiled for Linux to run on any platform. We use it to automatically fetch and run pre-compiled, up-to-date versions (called 'images') of the kUSD mining client.
          p With docker installed, it's time to fire up the terminal. To download the mining client, start it, generate a wallet and connect to the testnet via the console, run:
          pre
            code
              | docker run --rm -it kowalatech/kusd --testnet --new-account console
          p Docker should fetch the mining client and then start running it. The two flags near the start of the command &mdash; <code>--rm</code> and <code>-it</code> &mdash; are shorthand instructions to <strong>r</strong>e<strong>m</strong>ove the image when we're done, and run the container in <strong>i</strong>n<strong>t</strong>eractive mode. This command will create a disposable version of the mining client &mdash; all accounts will be deleted when you exit the console. That's the recommended approach for the testnet: since it may sometimes be unstable, you probably want to start again each time. If you want to make it persist, you can leave off the <code>--rm</code> flag.
          p The flags at the end tell the client to connect to the testnet, create a new account, and start the command-line console.
          p After a bit of automatic setup, you should be in the interactive kUSD JavaScript console. This is a command environment that's very similar to the <a href="https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console" target="_blank">Ethereum version</a>. Your node will want to synchronise with the network, which may take a few minutes.

          h4 Using a kUSD wallet
          p The official Docker image will create an account for you when it starts, and you can get its public address via the console:
          pre
            code
              | kcoin.coinbase
          p The console will output your public address. For example:
          pre
            code
              | > kcoin.coinbase
              | "0xe2ac86cbae1bbbb47d157516d334e70859a1be45"

          p By default the account will be locked. You can unlock it using the <code>personal.unlockAccount</code> function, and entering am empty password when prompted:
          pre
            code
              | > personal.unlockAccount(kcoin.coinbase)
              | Unlock account 0x3687c597c3366bf0c2d2fb0ff24b72117638dc8b
              | Passphrase:

          p
            em (If you want to use a non-empty password, you can pass an extra <code>--new-account-password=yourpassword</code> argument to the Docker command).

          h4 Getting kUSD balance
          p You can get your current balance (or the balance of any address) using <code>kcoin.getBalance</code>:
          pre
            code
              | > kcoin.getBalance(kcoin.coinbase)

          p You can get free coins for the testnet using the <a href="http://faucet.zygote.kowala.io" target="_blank">faucet</a>.

          h4 Sending transactions via the console
          p kUSD is sent using the <code>kcoin.sendTransaction()</code> function in the console. To send one of your kUSD to address <code>0xe2ac86cbae1bbbb47d157516d334e70859a1be45</code>, you can use:
          pre
            code
              | kcoin.sendTransaction({from:kcoin.coinbase, to:"0xe2ac86cbae1bbbb47d157516d334e70859a1be45", value: web3.toWei(1, "ether")})
          p As noted above, we're still using some Ethereum terminology. 1 kUSD is, in the console, 1 "ether".

          h4 Using mining tokens
          p You can get the balance of any address's mining tokens using <code>mtoken.getBalance</code>:
          pre
            code
              | mtoken.getBalance(kcoin.coinbase)

          p Transferring mining tokens can be achieved with <code>mtoken.transfer</code>, which is very simular to <code>kcoin.sendTransaction</code>:
          pre
            code
              | mtoken.transfer({from:kcoin.coinbase, to: "0xe2ac86cbae1bbbb47d157516d334e70859a1be45", value: 1})

          h4 Updating the docker image
          p We frequently push updates to the mining client. Fortunately, Docker makes keeping everything up to date very easy. Just run:
          pre
            code
              | docker pull kowalatech/kusd
