{"version":3,"sources":["numeral:numeral/numeral.js","numeral:numeral/min/languages.min.js","numeral:numeral/meteor/export.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,G;AACA,a;AACA,kB;AACA,uB;AACA,gB;AACA,4C;AACA,G;;AAEA,a;;AAEA,yC;AACA,iB;AACA,yC;;AAEA,gB;AACA,0B;AACA,qD;AACA,uB;AACA,+B;AACA,0B;AACA,8B;AACA,2B;AACA,sE;;;AAGA,yC;AACA,oB;AACA,yC;;;AAGA,+B;AACA,8B;AACA,6B;AACA,K;;AAEA,O;AACA,wE;AACA,M;AACA,oF;AACA,6D;AACA,O;AACA,qE;AACA,4C;AACA,4B;AACA,mB;;AAEA,8F;AACA,4F;AACA,8E;;AAEA,wB;AACA,oE;AACA,yD;AACA,S;;AAEA,sB;AACA,K;;AAEA,yC;AACA,kB;AACA,yC;;AAEA,sD;AACA,yD;AACA,mB;;AAEA,6D;AACA,wD;AACA,iE;AACA,4D;AACA,mE;AACA,sD;AACA,2C;AACA,8C;AACA,sE;AACA,S;;AAEA,wB;AACA,sB;AACA,K;;AAEA,uB;AACA,yC;AACA,oC;AACA,2B;AACA,0B;AACA,0B;AACA,2B;AACA,wE;AACA,oC;AACA,kB;;AAEA,uC;AACA,4C;AACA,gB;AACA,wC;AACA,6B;AACA,oB;AACA,4E;AACA,mH;AACA,iB;;AAEA,+F;AACA,2L;AACA,yL;AACA,yL;AACA,2L;;AAEA,uF;AACA,oE;AACA,iH;;AAEA,0C;AACA,8B;AACA,qB;AACA,iB;;AAEA,oD;AACA,khB;;AAEA,sD;AACA,8E;AACA,a;AACA,S;AACA,wB;AACA,K;;AAEA,0D;AACA,8C;AACA,iD;AACA,iD;AACA,uB;AACA,wB;AACA,mB;;AAEA,mD;AACA,wC;AACA,wB;AACA,8C;AACA,+C;AACA,wB;AACA,8C;AACA,gB;AACA,6C;AACA,S;;AAEA,4B;AACA,kE;;AAEA,8B;AACA,+B;AACA,uE;AACA,0C;AACA,gC;AACA,mF;AACA,+D;AACA,oC;AACA,iB;AACA,kG;AACA,yC;AACA,oB;AACA,qF;AACA,a;AACA,gB;AACA,2C;AACA,0C;AACA,yF;AACA,yC;AACA,oB;AACA,qF;AACA,a;AACA,S;;AAEA,sB;AACA,K;;AAEA,4D;AACA,uB;AACA,mB;AACA,mC;;AAEA,mC;AACA,wC;AACA,wB;AACA,8C;AACA,gB;AACA,6C;AACA,S;;AAEA,+D;;AAEA,uC;AACA,sC;AACA,8C;AACA,qC;AACA,gB;AACA,0C;AACA,S;;AAEA,sB;AACA,K;;AAEA,4B;AACA,mD;AACA,sE;AACA,gF;AACA,2H;AACA,K;;AAEA,mC;AACA,0C;AACA,wB;AACA,kE;AACA,qC;AACA,oB;AACA,iE;AACA,sB;AACA,4D;AACA,sB;AACA,qD;AACA,4C;AACA,sB;AACA,4D;AACA,sB;AACA,qD;AACA,S;AACA,+B;AACA,K;;AAEA,4D;AACA,yB;AACA,2B;AACA,2B;AACA,sB;AACA,6D;AACA,4D;AACA,4D;AACA,6D;AACA,oD;AACA,uB;AACA,qB;AACA,kC;AACA,6E;AACA,gB;AACA,gB;AACA,kB;AACA,c;AACA,sB;AACA,sB;AACA,mB;AACA,wB;;AAEA,wE;AACA,iD;AACA,8B;AACA,gB;AACA,sG;AACA,4D;AACA,2C;AACA,4B;AACA,6C;AACA,kD;AACA,8B;AACA,mD;AACA,a;;AAEA,4C;AACA,2C;AACA,qD;AACA,kD;AACA,kD;AACA,kD;AACA,kD;AACA,6D;;AAEA,sD;AACA,gD;AACA,+B;AACA,sD;AACA,wB;AACA,qD;AACA,iB;;AAEA,qE;AACA,+B;AACA,oF;AACA,qD;AACA,qG;AACA,8B;AACA,mF;AACA,oD;AACA,oG;AACA,8B;AACA,mF;AACA,oD;AACA,oG;AACA,+B;AACA,oF;AACA,oD;AACA,iB;AACA,a;;AAEA,6C;AACA,2C;AACA,yC;AACA,gD;AACA,gC;AACA,sD;AACA,wB;AACA,qD;AACA,iB;;AAEA,oE;AACA,gD;AACA,oD;;AAEA,sD;AACA,wD;AACA,sC;AACA,gD;AACA,yB;AACA,8B;AACA,qB;AACA,iB;AACA,a;;AAEA,uC;AACA,2C;AACA,yC;AACA,gD;AACA,8B;AACA,sD;AACA,wB;AACA,qD;AACA,iB;;AAEA,sE;AACA,a;;AAEA,6C;AACA,8B;AACA,oD;AACA,a;;AAEA,+C;AACA,6C;AACA,4C;;AAEA,4B;AACA,kD;AACA,2D;AACA,qD;AACA,2H;AACA,wB;AACA,2E;AACA,iB;;AAEA,oC;;AAEA,6C;AACA,wF;AACA,wB;AACA,2B;AACA,iB;;AAEA,yD;AACA,2B;AACA,iB;AACA,oB;AACA,2D;AACA,a;;AAEA,4B;AACA,sC;AACA,+B;AACA,2B;AACA,a;;AAEA,iC;AACA,4H;AACA,a;;AAEA,4C;AACA,uB;AACA,a;;AAEA,sN;AACA,S;AACA,K;;AAEA,yC;AACA,2B;AACA,yC;;AAEA,+B;AACA,uC;AACA,kC;AACA,iE;AACA,sB;AACA,oC;AACA,+C;AACA,S;;AAEA,0C;AACA,M;;AAEA,qB;AACA,8B;;AAEA,6B;AACA,uC;AACA,sC;AACA,M;;AAEA,8E;AACA,2E;AACA,oB;AACA,8C;AACA,mB;AACA,mC;AACA,S;AACA,Q;AACA,gC;;AAEA,6B;AACA,kC;AACA,6D;AACA,a;AACA,kC;AACA,S;;AAEA,wC;AACA,sC;AACA,S;;AAEA,uB;AACA,M;;AAEA,qE;AACA,oE;AACA,8B;AACA,0C;AACA,mB;AACA,8C;AACA,S;;AAEA,8B;AACA,yD;AACA,S;;AAEA,8B;AACA,M;;AAEA,4B;AACA,qB;AACA,2B;AACA,wB;AACA,U;AACA,wB;AACA,0B;AACA,yB;AACA,yB;AACA,yB;AACA,U;AACA,mC;AACA,gC;AACA,yD;AACA,kC;AACA,kC;AACA,wC;AACA,U;AACA,mB;AACA,uB;AACA,S;AACA,O;;AAEA,2C;AACA,iE;AACA,M;;AAEA,8C;AACA,qE;AACA,M;;AAEA,+C;;AAEA,wB;AACA,yB;AACA,wB;AACA,sB;AACA,qB;AACA,2B;AACA,yB;AACA,iB;;AAEA,8B;AACA,sC;AACA,sB;AACA,+B;AACA,gG;AACA,a;AACA,S;;AAEA,4C;AACA,yB;;AAEA,2C;AACA,qC;AACA,wB;AACA,S;;AAEA,sC;AACA,yB;AACA,yB;AACA,S;;AAEA,2E;AACA,a;AACA,mG;AACA,yD;AACA,qB;AACA,oE;AACA,S;;AAEA,4E;AACA,mD;AACA,8C;AACA,sD;AACA,wD;AACA,iC;AACA,gB;AACA,6D;AACA,S;;AAEA,qC;AACA,oC;AACA,4B;AACA,gC;AACA,0C;AACA,6B;AACA,a;AACA,S;;AAEA,wC;AACA,oC;AACA,4B;AACA,mC;AACA,iJ;AACA,6B;AACA,a;AACA,S;;AAEA,0D;;AAEA,qC;AACA,+C;AACA,uC;AACA,6B;AACA,oB;AACA,2C;AACA,wG;AACA,wB;AACA,oD;AACA,0I;AACA,4B;AACA,8I;AACA,qB;AACA,iB;AACA,a;AACA,S;;AAEA,qB;AACA,M;;AAEA,yC;AACA,e;AACA,yC;;AAEA,wC;AACA,gC;AACA,K;;AAEA,yC;AACA,8B;AACA,yC;;AAEA,6D;AACA,wE;;AAEA,O;AACA,gE;AACA,kH;AACA,O;AACA,uD;AACA,uE;AACA,yB;;AAEA,+D;AACA,oF;AACA,qF;AACA,mF;AACA,0F;AACA,a;;AAEA,iD;AACA,qE;AACA,a;;AAEA,sB;AACA,sB;AACA,2C;AACA,mC;;AAEA,uC;AACA,yC;AACA,kC;AACA,a;;AAEA,sD;AACA,iD;AACA,qC;AACA,0E;AACA,4B;AACA,4C;AACA,0C;AACA,qB;AACA,iB;AACA,a;;AAEA,8B;AACA,mF;AACA,a;;AAEA,yB;AACA,U;AACA,K;;;AAGA,O;AACA,wD;AACA,wD;AACA,wB;AACA,O;AACA,4B;AACA,4C;AACA,+B;AACA,qB;AACA,S;AACA,6C;AACA,K;;AAEA,O;AACA,gE;AACA,uE;AACA,mB;AACA,O;AACA,iC;AACA,yD;AACA,iD;AACA,sC;AACA,sC;AACA,qC;AACA,sB;AACA,K;;;AAGA,yC;AACA,yB;AACA,yC;;;AAGA,sC;;AAEA,2B;AACA,iC;AACA,U;;AAEA,yD;AACA,sC;AACA,2H;AACA,c;AACA,U;;AAEA,yC;AACA,oF;AACA,mC;AACA,a;AACA,oF;AACA,U;;AAEA,2B;AACA,+B;AACA,U;;AAEA,6B;AACA,+B;AACA,U;;AAEA,8B;AACA,wC;AACA,wB;AACA,U;;AAEA,8B;AACA,6E;;AAEA,mD;AACA,iD;AACA,a;AACA,6E;AACA,wB;AACA,U;;AAEA,mC;AACA,6E;;AAEA,mD;AACA,iD;AACA,a;AACA,uF;AACA,wB;AACA,U;;AAEA,mC;AACA,mD;AACA,+D;AACA,mE;AACA,8C;AACA,a;AACA,gE;AACA,wB;AACA,U;;AAEA,iC;AACA,mD;AACA,+D;AACA,kE;AACA,a;AACA,6D;AACA,wB;AACA,U;;AAEA,qC;AACA,0E;AACA,S;;AAEA,M;;AAEA,yC;AACA,wB;AACA,yC;;AAEA,iC;AACA,oB;AACA,iC;AACA,K;;AAEA,2B;AACA,uC;AACA,gF;AACA,oE;AACA,+C;AACA,kC;AACA,K;;AAEA,4B;AACA,qD;AACA,+B;AACA,2B;AACA,W;AACA,K;AACA,c;;;;;;;;;;;;;;;;;;;ACnwBA,I;AACA,oC;AACA,mC;AACA,wD;AACA,G;AACA,kZ;AACA,oC;AACA,gC;AACA,gD;AACA,G;AACA,uV;AACA,oC;AACA,wB;AACA,+D;AACA,G;AACA,4V;AACA,oC;AACA,iC;AACA,6D;AACA,G;AACA,8V;AACA,oC;AACA,2C;AACA,kH;AACA,G;AACA,0V;AACA,oC;AACA,qF;AACA,kD;AACA,G;AACA,qV;AACA,oC;AACA,yC;AACA,mD;AACA,G;AACA,6Z;AACA,oC;AACA,2B;AACA,sD;AACA,G;AACA,ya;AACA,oC;AACA,qB;AACA,sD;AACA,G;AACA,ya;AACA,oC;AACA,sB;AACA,uD;AACA,E;AACA,wD;AACA,4B;AACA,G;AACA,iW;AACA,oC;AACA,qB;AACA,yD;AACA,G;AACA,oV;AACA,oC;AACA,qC;AACA,6D;AACA,G;AACA,qW;AACA,oC;AACA,4B;AACA,wD;AACA,G;AACA,uW;AACA,oC;AACA,yB;AACA,wD;AACA,G;AACA,iW;AACA,oC;AACA,4B;AACA,uD;AACA,G;AACA,yV;AACA,oC;AACA,gC;AACA,kD;AACA,G;AACA,0V;AACA,oC;AACA,sB;AACA,gD;AACA,G;AACA,sV;AACA,oC;AACA,0B;AACA,iE;AACA,G;AACA,4W;AACA,oC;AACA,uC;AACA,oD;AACA,G;AACA,8Y;AACA,oC;AACA,yB;AACA,2D;AACA,G;AACA,gW;AACA,oC;AACA,uC;AACA,6D;AACA,G;AACA,iW;AACA,oC;AACA,gC;AACA,uD;AACA,G;AACA,irB;AACA,oC;AACA,0B;AACA,+D;AACA,G;AACA,4V;AACA,oC;AACA,yB;AACA,uD;AACA,G;AACA,2V;AACA,oC;AACA,uB;AACA,2D;AACA,G;AACA,uW;AACA,oC;AACA,0B;AACA,+I;AACA,G;AACA,08B;;;;;;;;;;;;;;;;;;ACrIA,wB;AACA,2B;AACA,wB;AACA,C;;AAEA,wB;AACA,mC;AACA,C","file":"/packages/numeral:numeral.js","sourcesContent":["/*!\n * numeral.js\n * version : 1.5.3\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function() {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var numeral,\n        VERSION = '1.5.3',\n        // internal storage for language config files\n        languages = {},\n        currentLanguage = 'en',\n        zeroFormat = null,\n        defaultFormat = '0,0',\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numeral prototype object\n    function Numeral(number) {\n        this._value = number;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed(value, precision, roundingFunction, optionals) {\n        var power = Math.pow(10, precision),\n            optionalsRegExp,\n            output;\n\n        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n        // Multiply up by precision, round accurately, then divide and use native toFixed():\n        output = (roundingFunction(value * power) / power).toFixed(precision);\n\n        if (optionals) {\n            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumeral(n, format, roundingFunction) {\n        var output;\n\n        // figure out what kind of format we are dealing with\n        if (format.indexOf('$') > -1) { // currency!!!!!\n            output = formatCurrency(n, format, roundingFunction);\n        } else if (format.indexOf('%') > -1) { // percentage\n            output = formatPercentage(n, format, roundingFunction);\n        } else if (format.indexOf(':') > -1) { // time\n            output = formatTime(n, format);\n        } else { // plain ol' numbers or bytes\n            output = formatNumber(n._value, format, roundingFunction);\n        }\n\n        // return string\n        return output;\n    }\n\n    // revert to number\n    function unformatNumeral(n, string) {\n        var stringOriginal = string,\n            thousandRegExp,\n            millionRegExp,\n            billionRegExp,\n            trillionRegExp,\n            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            bytesMultiplier = false,\n            power;\n\n        if (string.indexOf(':') > -1) {\n            n._value = unformatTime(string);\n        } else {\n            if (string === zeroFormat) {\n                n._value = 0;\n            } else {\n                if (languages[currentLanguage].delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(languages[currentLanguage].delimiters.decimal, '.');\n                }\n\n                // see if abbreviations are there so that we can multiply to the correct number\n                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\n                // see if bytes are there so that we can multiply to the correct number\n                for (power = 0; power <= suffixes.length; power++) {\n                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;\n\n                    if (bytesMultiplier) {\n                        break;\n                    }\n                }\n\n                // do some math to create our number\n                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2) ? 1 : -1) * Number(string.replace(/[^0-9\\.]+/g, ''));\n\n                // round if we are talking about bytes\n                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;\n            }\n        }\n        return n._value;\n    }\n\n    function formatCurrency(n, format, roundingFunction) {\n        var symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            spliceIndex,\n            output;\n\n        // check for space before or after currency\n        if (format.indexOf(' $') > -1) {\n            space = ' ';\n            format = format.replace(' $', '');\n        } else if (format.indexOf('$ ') > -1) {\n            space = ' ';\n            format = format.replace('$ ', '');\n        } else {\n            format = format.replace('$', '');\n        }\n\n        // format the number\n        output = formatNumber(n._value, format, roundingFunction);\n\n        // position the symbol\n        if (symbolIndex <= 1) {\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                output = output.split('');\n                spliceIndex = 1;\n                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {\n                    // the symbol appears before the \"(\" or \"-\"\n                    spliceIndex = 0;\n                }\n                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);\n                output = output.join('');\n            } else {\n                output = languages[currentLanguage].currency.symbol + space + output;\n            }\n        } else {\n            if (output.indexOf(')') > -1) {\n                output = output.split('');\n                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);\n                output = output.join('');\n            } else {\n                output = output + space + languages[currentLanguage].currency.symbol;\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage(n, format, roundingFunction) {\n        var space = '',\n            output,\n            value = n._value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n\n        if (output.indexOf(')') > -1) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }\n\n    function formatTime(n) {\n        var hours = Math.floor(n._value / 60 / 60),\n            minutes = Math.floor((n._value - (hours * 60 * 60)) / 60),\n            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function unformatTime(string) {\n        var timeArray = string.split(':'),\n            seconds = 0;\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n            // hours\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n            // minutes\n            seconds = seconds + (Number(timeArray[1]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n            // minutes\n            seconds = seconds + (Number(timeArray[0]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n    }\n\n    function formatNumber(value, format, roundingFunction) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            bytes = '',\n            ord = '',\n            abs = Math.abs(value),\n            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            min,\n            max,\n            power,\n            w,\n            precision,\n            thousands,\n            d = '',\n            neg = false;\n\n        // check if number is zero and a custom zero format has been set\n        if (value === 0 && zeroFormat !== null) {\n            return zeroFormat;\n        } else {\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (format.indexOf('(') > -1) {\n                negP = true;\n                format = format.slice(1, -1);\n            } else if (format.indexOf('+') > -1) {\n                signed = true;\n                format = format.replace(/\\+/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (format.indexOf('a') > -1) {\n                // check if abbreviation is specified\n                abbrK = format.indexOf('aK') >= 0;\n                abbrM = format.indexOf('aM') >= 0;\n                abbrB = format.indexOf('aB') >= 0;\n                abbrT = format.indexOf('aT') >= 0;\n                abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n                // check for space before abbreviation\n                if (format.indexOf(' a') > -1) {\n                    abbr = ' ';\n                    format = format.replace(' a', '');\n                } else {\n                    format = format.replace('a', '');\n                }\n\n                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                    // trillion\n                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;\n                    value = value / Math.pow(10, 12);\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                    // billion\n                    abbr = abbr + languages[currentLanguage].abbreviations.billion;\n                    value = value / Math.pow(10, 9);\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                    // million\n                    abbr = abbr + languages[currentLanguage].abbreviations.million;\n                    value = value / Math.pow(10, 6);\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                    // thousand\n                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;\n                    value = value / Math.pow(10, 3);\n                }\n            }\n\n            // see if we are formatting bytes\n            if (format.indexOf('b') > -1) {\n                // check for space before\n                if (format.indexOf(' b') > -1) {\n                    bytes = ' ';\n                    format = format.replace(' b', '');\n                } else {\n                    format = format.replace('b', '');\n                }\n\n                for (power = 0; power <= suffixes.length; power++) {\n                    min = Math.pow(1024, power);\n                    max = Math.pow(1024, power + 1);\n\n                    if (value >= min && value < max) {\n                        bytes = bytes + suffixes[power];\n                        if (min > 0) {\n                            value = value / min;\n                        }\n                        break;\n                    }\n                }\n            }\n\n            // see if ordinal is wanted\n            if (format.indexOf('o') > -1) {\n                // check for space before\n                if (format.indexOf(' o') > -1) {\n                    ord = ' ';\n                    format = format.replace(' o', '');\n                } else {\n                    format = format.replace('o', '');\n                }\n\n                ord = ord + languages[currentLanguage].ordinal(value);\n            }\n\n            if (format.indexOf('[.]') > -1) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            w = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n\n            if (precision) {\n                if (precision.indexOf('[') > -1) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    d = toFixed(value, precision.length, roundingFunction);\n                }\n\n                w = d.split('.')[0];\n\n                if (d.split('.')[1].length) {\n                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];\n                } else {\n                    d = '';\n                }\n\n                if (optDec && Number(d.slice(1)) === 0) {\n                    d = '';\n                }\n            } else {\n                w = toFixed(value, null, roundingFunction);\n            }\n\n            // format number\n            if (w.indexOf('-') > -1) {\n                w = w.slice(1);\n                neg = true;\n            }\n\n            if (thousands > -1) {\n                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                w = '';\n            }\n\n            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n        }\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numeral = function(input) {\n        if (numeral.isNumeral(input)) {\n            input = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            input = 0;\n        } else if (!Number(input)) {\n            input = numeral.fn.unformat(input);\n        }\n\n        return new Numeral(Number(input));\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    numeral.language = function(key, values) {\n        if (!key) {\n            return currentLanguage;\n        }\n        \n        key = key.toLowerCase();\n\n        if (key && !values) {\n            if (!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n            currentLanguage = key;\n        }\n\n        if (values || !languages[key]) {\n            loadLanguage(key, values);\n        }\n\n        return numeral;\n    };\n\n    // This function provides access to the loaded language data.  If\n    // no arguments are passed in, it will simply return the current\n    // global language object.\n    numeral.languageData = function(key) {\n        if (!key) {\n            return languages[currentLanguage];\n        }\n\n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n\n        return languages[key];\n    };\n\n    numeral.language('en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    numeral.zeroFormat = function(format) {\n        zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.validate = function(val, culture) {\n\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            languageData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if ( !! val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.languageData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current language\n            languageData = numeral.languageData(culture);\n        } catch (e) {\n            languageData = numeral.languageData(numeral.language());\n        }\n\n        //setup the delimiters and currency symbol based on culture/language\n        _currSymbol = languageData.currency.symbol;\n        _abbrObj = languageData.abbreviations;\n        _decimalSep = languageData.delimiters.decimal;\n        if (languageData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = languageData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function loadLanguage(key, values) {\n        languages[key] = values;\n    }\n\n    /************************************\n        Floating-point helpers\n    ************************************/\n\n    // The floating-point helper functions and implementation\n    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\n    /**\n     * Array.prototype.reduce for browsers that don't support it\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility\n     */\n    if ('function' !== typeof Array.prototype.reduce) {\n        Array.prototype.reduce = function(callback, opt_initialValue) {\n            'use strict';\n\n            if (null === this || 'undefined' === typeof this) {\n                // At the moment all modern browsers, that support strict mode, have\n                // native implementation of Array.prototype.reduce. For instance, IE8\n                // does not support strict mode, so this check is actually useless.\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if ('function' !== typeof callback) {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var index,\n                value,\n                length = this.length >>> 0,\n                isValueSet = false;\n\n            if (1 < arguments.length) {\n                value = opt_initialValue;\n                isValueSet = true;\n            }\n\n            for (index = 0; length > index; ++index) {\n                if (this.hasOwnProperty(index)) {\n                    if (isValueSet) {\n                        value = callback(value, this[index], index, this);\n                    } else {\n                        value = this[index];\n                        isValueSet = true;\n                    }\n                }\n            }\n\n            if (!isValueSet) {\n                throw new TypeError('Reduce of empty array with no initial value');\n            }\n\n            return value;\n        };\n    }\n\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    function multiplier(x) {\n        var parts = x.toString().split('.');\n        if (parts.length < 2) {\n            return 1;\n        }\n        return Math.pow(10, parts[1].length);\n    }\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    function correctionFactor() {\n        var args = Array.prototype.slice.call(arguments);\n        return args.reduce(function(prev, next) {\n            var mp = multiplier(prev),\n                mn = multiplier(next);\n            return mp > mn ? mp : mn;\n        }, -Infinity);\n    }\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n\n    numeral.fn = Numeral.prototype = {\n\n        clone: function() {\n            return numeral(this);\n        },\n\n        format: function(inputString, roundingFunction) {\n            return formatNumeral(this,\n                inputString ? inputString : defaultFormat, (roundingFunction !== undefined) ? roundingFunction : Math.round\n            );\n        },\n\n        unformat: function(inputString) {\n            if (Object.prototype.toString.call(inputString) === '[object Number]') {\n                return inputString;\n            }\n            return unformatNumeral(this, inputString ? inputString : defaultFormat);\n        },\n\n        value: function() {\n            return this._value;\n        },\n\n        valueOf: function() {\n            return this._value;\n        },\n\n        set: function(value) {\n            this._value = Number(value);\n            return this;\n        },\n\n        add: function(value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + corrFactor * curr;\n            }\n            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n            return this;\n        },\n\n        subtract: function(value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - corrFactor * curr;\n            }\n            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;\n            return this;\n        },\n\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) * (curr * corrFactor) /\n                    (corrFactor * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback, 1);\n            return this;\n        },\n\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) / (curr * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback);\n            return this;\n        },\n\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n\n    };\n\n    /************************************\n        Exposing Numeral\n    ************************************/\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = numeral;\n    }\n\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `numeral` as a global object via a string identifier,\n        // for Closure Compiler 'advanced' mode\n        this['numeral'] = numeral;\n    }\n\n    /*global define:false */\n    if (typeof define === 'function' && define.amd) {\n        define([], function() {\n            return numeral;\n        });\n    }\n}).call(this);\n","/*! \n * numeral.js language configuration\n * language : belgium-dutch (be-nl)\n * author : Dieter Luypaert : https://github.com/moeriki\n */\n!function(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"k\",million:\" mln\",billion:\" mld\",trillion:\" bln\"},ordinal:function(a){var b=a%100;return 0!==a&&1>=b||8===b||b>=20?\"ste\":\"de\"},currency:{symbol:\"€ \"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"be-nl\",a)}(),/*! \n * numeral.js language configuration\n * language : simplified chinese\n * author : badplum : https://github.com/badplum\n */\nfunction(){var a={delimiters:{thousands:\",\",decimal:\".\"},abbreviations:{thousand:\"千\",million:\"百万\",billion:\"十亿\",trillion:\"兆\"},ordinal:function(){return\".\"},currency:{symbol:\"¥\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"chs\",a)}(),/*!\n * numeral.js language configuration\n * language : czech (cs)\n * author : Anatoli Papirovski : https://github.com/apapirovski\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"tis.\",million:\"mil.\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\".\"},currency:{symbol:\"Kč\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"cs\",a)}(),/*! \n * numeral.js language configuration\n * language : danish denmark (dk)\n * author : Michael Storgaard : https://github.com/mstorgaard\n */\nfunction(){var a={delimiters:{thousands:\".\",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"mio\",billion:\"mia\",trillion:\"b\"},ordinal:function(){return\".\"},currency:{symbol:\"DKK\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"da-dk\",a)}(),/*! \n * numeral.js language configuration\n * language : German in Switzerland (de-ch)\n * author : Michael Piefel : https://github.com/piefel (based on work from Marco Krage : https://github.com/sinky)\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"m\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\".\"},currency:{symbol:\"CHF\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"de-ch\",a)}(),/*! \n * numeral.js language configuration\n * language : German (de) – generally useful in Germany, Austria, Luxembourg, Belgium\n * author : Marco Krage : https://github.com/sinky\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"m\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\".\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"de\",a)}(),/*! \n * numeral.js language configuration\n * language : english united kingdom (uk)\n * author : Dan Ristic : https://github.com/dristic\n */\nfunction(){var a={delimiters:{thousands:\",\",decimal:\".\"},abbreviations:{thousand:\"k\",million:\"m\",billion:\"b\",trillion:\"t\"},ordinal:function(a){var b=a%10;return 1===~~(a%100/10)?\"th\":1===b?\"st\":2===b?\"nd\":3===b?\"rd\":\"th\"},currency:{symbol:\"£\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"en-gb\",a)}(),/*! \n * numeral.js language configuration\n * language : spanish Spain\n * author : Hernan Garcia : https://github.com/hgarcia\n */\nfunction(){var a={delimiters:{thousands:\".\",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"mm\",billion:\"b\",trillion:\"t\"},ordinal:function(a){var b=a%10;return 1===b||3===b?\"er\":2===b?\"do\":7===b||0===b?\"mo\":8===b?\"vo\":9===b?\"no\":\"to\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"es\",a)}(),/*! \n * numeral.js language configuration\n * language : spanish\n * author : Hernan Garcia : https://github.com/hgarcia\n */\nfunction(){var a={delimiters:{thousands:\".\",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"mm\",billion:\"b\",trillion:\"t\"},ordinal:function(a){var b=a%10;return 1===b||3===b?\"er\":2===b?\"do\":7===b||0===b?\"mo\":8===b?\"vo\":9===b?\"no\":\"to\"},currency:{symbol:\"$\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"es\",a)}(),/*! \n * numeral.js language configuration\n * language : Estonian\n * author : Illimar Tambek : https://github.com/ragulka\n *\n * Note: in Estonian, abbreviations are always separated\n * from numbers with a space\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\" tuh\",million:\" mln\",billion:\" mld\",trillion:\" trl\"},ordinal:function(){return\".\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"et\",a)}(),/*! \n * numeral.js language configuration\n * language : Finnish\n * author : Sami Saada : https://github.com/samitheberber\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"M\",billion:\"G\",trillion:\"T\"},ordinal:function(){return\".\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"fi\",a)}(),/*!\n * numeral.js language configuration\n * language : french (Canada) (fr-CA)\n * author : Léo Renaud-Allaire : https://github.com/renaudleo\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"M\",billion:\"G\",trillion:\"T\"},ordinal:function(a){return 1===a?\"er\":\"e\"},currency:{symbol:\"$\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"fr-CA\",a)}(),/*! \n * numeral.js language configuration\n * language : french (fr-ch)\n * author : Adam Draper : https://github.com/adamwdraper\n */\nfunction(){var a={delimiters:{thousands:\"'\",decimal:\".\"},abbreviations:{thousand:\"k\",million:\"m\",billion:\"b\",trillion:\"t\"},ordinal:function(a){return 1===a?\"er\":\"e\"},currency:{symbol:\"CHF\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"fr-ch\",a)}(),/*! \n * numeral.js language configuration\n * language : french (fr)\n * author : Adam Draper : https://github.com/adamwdraper\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"m\",billion:\"b\",trillion:\"t\"},ordinal:function(a){return 1===a?\"er\":\"e\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"fr\",a)}(),/*!\n * numeral.js language configuration\n * language : Hungarian (hu)\n * author : Peter Bakondy : https://github.com/pbakondy\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"E\",million:\"M\",billion:\"Mrd\",trillion:\"T\"},ordinal:function(){return\".\"},currency:{symbol:\" Ft\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"hu\",a)}(),/*! \n * numeral.js language configuration\n * language : italian Italy (it)\n * author : Giacomo Trombi : http://cinquepunti.it\n */\nfunction(){var a={delimiters:{thousands:\".\",decimal:\",\"},abbreviations:{thousand:\"mila\",million:\"mil\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\"º\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"it\",a)}(),/*! \n * numeral.js language configuration\n * language : japanese\n * author : teppeis : https://github.com/teppeis\n */\nfunction(){var a={delimiters:{thousands:\",\",decimal:\".\"},abbreviations:{thousand:\"千\",million:\"百万\",billion:\"十億\",trillion:\"兆\"},ordinal:function(){return\".\"},currency:{symbol:\"¥\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"ja\",a)}(),/*!\n * numeral.js language configuration\n * language : Latvian (lv)\n * author : Lauris Bukšis-Haberkorns : https://github.com/Lafriks\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\" tūkst.\",million:\" milj.\",billion:\" mljrd.\",trillion:\" trilj.\"},ordinal:function(){return\".\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"lv\",a)}(),/*! \n * numeral.js language configuration\n * language : netherlands-dutch (nl-nl)\n * author : Dave Clayton : https://github.com/davedx\n */\nfunction(){var a={delimiters:{thousands:\".\",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"mln\",billion:\"mrd\",trillion:\"bln\"},ordinal:function(a){var b=a%100;return 0!==a&&1>=b||8===b||b>=20?\"ste\":\"de\"},currency:{symbol:\"€ \"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"nl-nl\",a)}(),/*! \n * numeral.js language configuration\n * language : polish (pl)\n * author : Dominik Bulaj : https://github.com/dominikbulaj\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"tys.\",million:\"mln\",billion:\"mld\",trillion:\"bln\"},ordinal:function(){return\".\"},currency:{symbol:\"PLN\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"pl\",a)}(),/*! \n * numeral.js language configuration\n * language : portuguese brazil (pt-br)\n * author : Ramiro Varandas Jr : https://github.com/ramirovjr\n */\nfunction(){var a={delimiters:{thousands:\".\",decimal:\",\"},abbreviations:{thousand:\"mil\",million:\"milhões\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\"º\"},currency:{symbol:\"R$\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"pt-br\",a)}(),/*! \n * numeral.js language configuration\n * language : portuguese (pt-pt)\n * author : Diogo Resende : https://github.com/dresende\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"k\",million:\"m\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\"º\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"pt-pt\",a)}(),function(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"тыс.\",million:\"млн\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\".\"},currency:{symbol:\"₴\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"ru-UA\",a)}(),/*! \n * numeral.js language configuration\n * language : russian (ru)\n * author : Anatoli Papirovski : https://github.com/apapirovski\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"тыс.\",million:\"млн\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\".\"},currency:{symbol:\"руб.\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"ru\",a)}(),/*!\n * numeral.js language configuration\n * language : slovak (sk)\n * author : Ahmed Al Hafoudh : http://www.freevision.sk\n */\nfunction(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"tis.\",million:\"mil.\",billion:\"b\",trillion:\"t\"},ordinal:function(){return\".\"},currency:{symbol:\"€\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"sk\",a)}(),/*! \n * numeral.js language configuration\n * language : thai (th)\n * author : Sathit Jittanupat : https://github.com/jojosati\n */\nfunction(){var a={delimiters:{thousands:\",\",decimal:\".\"},abbreviations:{thousand:\"พัน\",million:\"ล้าน\",billion:\"พันล้าน\",trillion:\"ล้านล้าน\"},ordinal:function(){return\".\"},currency:{symbol:\"฿\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"th\",a)}(),/*! \n * numeral.js language configuration\n * language : turkish (tr)\n * author : Ecmel Ercan : https://github.com/ecmel, Erhan Gundogan : https://github.com/erhangundogan, Burak Yiğit Kaya: https://github.com/BYK\n */\nfunction(){var a={1:\"'inci\",5:\"'inci\",8:\"'inci\",70:\"'inci\",80:\"'inci\",2:\"'nci\",7:\"'nci\",20:\"'nci\",50:\"'nci\",3:\"'üncü\",4:\"'üncü\",100:\"'üncü\",6:\"'ncı\",9:\"'uncu\",10:\"'uncu\",30:\"'uncu\",60:\"'ıncı\",90:\"'ıncı\"},b={delimiters:{thousands:\".\",decimal:\",\"},abbreviations:{thousand:\"bin\",million:\"milyon\",billion:\"milyar\",trillion:\"trilyon\"},ordinal:function(b){if(0===b)return\"'ıncı\";var c=b%10,d=b%100-c,e=b>=100?100:null;return a[c]||a[d]||a[e]},currency:{symbol:\"₺\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=b),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"tr\",b)}(),function(){var a={delimiters:{thousands:\" \",decimal:\",\"},abbreviations:{thousand:\"тис.\",million:\"млн\",billion:\"млрд\",trillion:\"блн\"},ordinal:function(){return\"\"},currency:{symbol:\"₴\"}};\"undefined\"!=typeof module&&module.exports&&(module.exports=a),\"undefined\"!=typeof window&&this.numeral&&this.numeral.language&&this.numeral.language(\"uk-UA\",a)}();","if ( Meteor.isClient ) {\n  numeral = window.numeral;\n  delete window.numeral;\n}\n\nif ( Meteor.isServer ) {\n  numeral = Npm.require('numeral');\n}"]}