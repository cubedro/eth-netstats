{"version":3,"sources":["boilerplate-generator/boilerplate-generator.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,2B;AACA,+B;;AAEA,4B;AACA,4C;AACA,yD;AACA,E;;AAEA,kD;AACA,kB;AACA,0B;AACA,qC;AACA,uB;AACA,mB;;AAEA,iD;AACA,a;AACA,kB;AACA,W;AACA,I;AACA,E;;AAEA,sE;AACA,qE;AACA,uE;AACA,mE;AACA,qD;AACA,kB;;AAEA,qC;AACA,kE;;AAEA,+B;AACA,+D;AACA,wC;AACA,E;;AAEA,4E;AACA,2C;AACA,qE;AACA,4E;AACA,gB;AACA,wE;AACA,4D;AACA,iE;AACA,mD;AACA,oB;AACA,qC;AACA,oD;AACA,sD;;AAEA,+B;AACA,c;AACA,a;AACA,e;AACA,e;AACA,8C;AACA,M;;AAEA,uD;AACA,6D;;AAEA,sC;AACA,wC;AACA,qC;;AAEA,2B;AACA,iD;AACA,iC;AACA,8B;AACA,O;;AAEA,2D;AACA,8C;AACA,O;AACA,0D;AACA,6C;AACA,O;AACA,iC;AACA,kC;AACA,kD;AACA,O;AACA,iC;AACA,kC;AACA,kD;AACA,O;AACA,O;AACA,0D;AACA,2C;;AAEA,8E;AACA,0D;AACA,gF;AACA,mB;AACA,mB;AACA,4C;AACA,wC;AACA,E;;AAEA,8C;AACA,iD;AACA,kC;AACA,G","file":"/packages/boilerplate-generator.js","sourcesContent":["var fs = Npm.require('fs');\nvar path = Npm.require('path');\n\n// Copied from webapp_server\nvar readUtf8FileSync = function (filename) {\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');\n};\n\nBoilerplate = function (arch, manifest, options) {\n  var self = this;\n  options = options || {};\n  self.template = _getTemplate(arch);\n  self.baseData = null;\n  self.func = null;\n\n  self._generateBoilerplateFromManifestAndSource(\n    manifest,\n    self.template,\n    options\n  );\n};\n\n// The 'extraData' argument can be used to extend 'self.baseData'. Its\n// purpose is to allow you to specify data that you might not know at\n// the time that you construct the Boilerplate object. (e.g. it is used\n// by 'webapp' to specify data that is only known at request-time).\nBoilerplate.prototype.toHTML = function (extraData) {\n  var self = this;\n\n  if (! self.baseData || ! self.func)\n    throw new Error('Boilerplate did not instantiate correctly.');\n\n  return  \"<!DOCTYPE html>\\n\" +\n    Blaze.toHTML(Blaze.With(_.extend(self.baseData, extraData),\n                            self.func));\n};\n\n// XXX Exported to allow client-side only changes to rebuild the boilerplate\n// without requiring a full server restart.\n// Produces an HTML string with given manifest and boilerplateSource.\n// Optionally takes urlMapper in case urls from manifest need to be prefixed\n// or rewritten.\n// Optionally takes pathMapper for resolving relative file system paths.\n// Optionally allows to override fields of the data context.\nBoilerplate.prototype._generateBoilerplateFromManifestAndSource =\n  function (manifest, boilerplateSource, options) {\n    var self = this;\n    // map to the identity by default\n    var urlMapper = options.urlMapper || _.identity;\n    var pathMapper = options.pathMapper || _.identity;\n\n    var boilerplateBaseData = {\n      css: [],\n      js: [],\n      head: '',\n      body: '',\n      meteorManifest: JSON.stringify(manifest)\n    };\n\n    // allow the caller to extend the default base data\n    _.extend(boilerplateBaseData, options.baseDataExtension);\n\n    _.each(manifest, function (item) {\n      var urlPath = urlMapper(item.url);\n      var itemObj = { url: urlPath };\n\n      if (options.inline) {\n        itemObj.scriptContent = readUtf8FileSync(\n          pathMapper(item.path));\n        itemObj.inline = true;\n      }\n\n      if (item.type === 'css' && item.where === 'client') {\n        boilerplateBaseData.css.push(itemObj);\n      }\n      if (item.type === 'js' && item.where === 'client') {\n        boilerplateBaseData.js.push(itemObj);\n      }\n      if (item.type === 'head') {\n        boilerplateBaseData.head =\n          readUtf8FileSync(pathMapper(item.path));\n      }\n      if (item.type === 'body') {\n        boilerplateBaseData.body =\n          readUtf8FileSync(pathMapper(item.path));\n      }\n    });\n    var boilerplateRenderCode = SpacebarsCompiler.compile(\n      boilerplateSource, { isBody: true });\n\n    // Note that we are actually depending on eval's local environment capture\n    // so that UI and HTML are visible to the eval'd code.\n    // XXX the template we are evaluating relies on the fact that UI is globally\n      // available.\n    global.UI = UI;\n    self.func = eval(boilerplateRenderCode);\n    self.baseData = boilerplateBaseData;\n};\n\nvar _getTemplate = _.memoize(function (arch) {\n  var filename = 'boilerplate_' + arch + '.html';\n  return Assets.getText(filename);\n});\n"]}