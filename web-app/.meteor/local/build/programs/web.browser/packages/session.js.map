)]}'
{"version":3,"sources":["session/session.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sC;;AAEA,uE;AACA,Y;;AAEA,G;AACA,oB;AACA,c;AACA,8E;AACA,mD;AACA,kE;AACA,gD;AACA,gB;AACA,yD;AACA,+D;AACA,G;;AAEA,G;AACA,oB;AACA,qB;AACA,uE;AACA,qE;AACA,gB;AACA,yD;AACA,+D;AACA,G;;AAEA,G;AACA,oB;AACA,c;AACA,sE;AACA,0E;AACA,0E;AACA,0E;AACA,uE;AACA,W;AACA,gB;AACA,iE;AACA,G;;AAEA,G;AACA,oB;AACA,iB;AACA,uE;AACA,2E;AACA,kD;AACA,gB;AACA,+D;AACA,2E;AACA,e;AACA,G","file":"/packages/session.js","sourcesContent":["Session = new ReactiveDict('session');\n\n// Documentation here is really awkward because the methods are defined\n// elsewhere\n\n/**\n * @memberOf Session\n * @method set\n * @summary Set a variable in the session. Notify any listeners that the value\n * has changed (eg: redraw templates, and rerun any\n * [`Tracker.autorun`](#tracker_autorun) computations, that called\n * [`Session.get`](#session_get) on this `key`.)\n * @locus Client\n * @param {String} key The key to set, eg, `selectedItem`\n * @param {EJSONable | undefined} value The new value for `key`\n */\n\n/**\n * @memberOf Session\n * @method setDefault\n * @summary Set a variable in the session if it hasn't been set before.\n * Otherwise works exactly the same as [`Session.set`](#session_set).\n * @locus Client\n * @param {String} key The key to set, eg, `selectedItem`\n * @param {EJSONable | undefined} value The new value for `key`\n */\n\n/**\n * @memberOf Session\n * @method get\n * @summary Get the value of a session variable. If inside a [reactive\n * computation](#reactivity), invalidate the computation the next time the\n * value of the variable is changed by [`Session.set`](#session_set). This\n * returns a clone of the session value, so if it's an object or an array,\n * mutating the returned value has no effect on the value stored in the\n * session.\n * @locus Client\n * @param {String} key The name of the session variable to return\n */\n\n/**\n * @memberOf Session\n * @method equals\n * @summary Test if a session variable is equal to a value. If inside a\n * [reactive computation](#reactivity), invalidate the computation the next\n * time the variable changes to or from the value.\n * @locus Client\n * @param {String} key The name of the session variable to test\n * @param {String | Number | Boolean | null | undefined} value The value to\n * test against\n */\n"]}