)]}'
{"version":3,"sources":["ordered-dict/ordered_dict.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yE;AACA,8E;AACA,+C;;AAEA,4E;AACA,sB;;AAEA,kC;AACA,8C;AACA,iD;AACA,U;AACA,a;AACA,iB;AACA,e;AACA,c;AACA,I;AACA,E;AACA,oC;AACA,kB;AACA,kB;AACA,qB;AACA,oB;AACA,iB;AACA,kC;AACA,+C;AACA,oC;AACA,mC;AACA,8B;AACA,uC;AACA,K;AACA,E;;AAEA,iC;AACA,yD;AACA,gF;AACA,4D;;AAEA,sB;AACA,oB;AACA,wB;AACA,I;AACA,qB;AACA,oB;AACA,sB;AACA,I;AACA,8B;AACA,oB;AACA,oB;AACA,4B;AACA,qB;AACA,8B;AACA,uB;AACA,Y;AACA,+B;AACA,0B;AACA,mB;AACA,4B;AACA,K;AACA,yD;AACA,wB;AACA,I;AACA,+B;AACA,oB;AACA,iB;AACA,+B;AACA,iB;AACA,+B;AACA,2B;AACA,4B;AACA,4B;AACA,6B;AACA,I;AACA,2C;AACA,oB;AACA,iC;AACA,yE;AACA,sB;AACA,2D;AACA,mC;AACA,+B;AACA,oE;AACA,yB;AACA,mC;AACA,iB;AACA,I;AACA,gC;AACA,oB;AACA,oC;AACA,I;AACA,0B;AACA,oB;AACA,uC;AACA,0B;AACA,qE;AACA,0B;AACA,iB;AACA,oC;AACA,qB;AACA,I;AACA,uB;AACA,oB;AACA,sB;AACA,8C;AACA,qB;AACA,I;AACA,uB;AACA,oB;AACA,2C;AACA,I;AACA,mE;AACA,yC;;AAEA,8E;AACA,4B;AACA,oB;AACA,c;AACA,0B;AACA,0B;AACA,0C;AACA,kC;AACA,e;AACA,qB;AACA,U;AACA,K;AACA,I;AACA,sB;AACA,oB;AACA,qB;AACA,uB;AACA,2B;AACA,I;AACA,2B;AACA,oB;AACA,qB;AACA,uB;AACA,6B;AACA,I;AACA,qB;AACA,oB;AACA,qB;AACA,uB;AACA,0B;AACA,I;AACA,0B;AACA,oB;AACA,qB;AACA,uB;AACA,4B;AACA,I;AACA,wB;AACA,oB;AACA,wB;AACA,yC;AACA,mB;AACA,4B;AACA,K;AACA,gB;AACA,I;AACA,wB;AACA,oB;AACA,wB;AACA,yC;AACA,mB;AACA,4B;AACA,K;AACA,gB;AACA,I;AACA,sC;AACA,oB;AACA,uC;AACA,gE;AACA,0B;AACA,qD;AACA,kC;AACA,wE;AACA,K;AACA,sD;AACA,a;AACA,gC;AACA,0B;AACA,+B;AACA,yB;AACA,yB;AACA,I;AACA,mB;AACA,2B;AACA,oB;AACA,mB;AACA,qC;AACA,wC;AACA,gB;AACA,iC;AACA,O;AACA,uB;AACA,O;AACA,e;AACA,I;AACA,0B;AACA,oB;AACA,wC;AACA,uB;AACA,0C;AACA,uB;AACA,0C;AACA,O;AACA,G;;AAEA,G;AACA,oC","file":"/packages/ordered-dict.js","sourcesContent":["// This file defines an ordered dictionary abstraction that is useful for\n// maintaining a dataset backed by observeChanges.  It supports ordering items\n// by specifying the item they now come before.\n\n// The implementation is a dictionary that contains nodes of a doubly-linked\n// list as its values.\n\n// constructs a new element struct\n// next and prev are whole elements, not keys.\nvar element = function (key, value, next, prev) {\n  return {\n    key: key,\n    value: value,\n    next: next,\n    prev: prev\n  };\n};\nOrderedDict = function (/* ... */) {\n  var self = this;\n  self._dict = {};\n  self._first = null;\n  self._last = null;\n  self._size = 0;\n  var args = _.toArray(arguments);\n  self._stringify = function (x) { return x; };\n  if (typeof args[0] === 'function')\n    self._stringify = args.shift();\n  _.each(args, function (kv) {\n    self.putBefore(kv[0], kv[1], null);\n  });\n};\n\n_.extend(OrderedDict.prototype, {\n  // the \"prefix keys with a space\" thing comes from here\n  // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649\n  _k: function (key) { return \" \" + this._stringify(key); },\n\n  empty: function () {\n    var self = this;\n    return !self._first;\n  },\n  size: function () {\n    var self = this;\n    return self._size;\n  },\n  _linkEltIn: function (elt) {\n    var self = this;\n    if (!elt.next) {\n      elt.prev = self._last;\n      if (self._last)\n        self._last.next = elt;\n      self._last = elt;\n    } else {\n      elt.prev = elt.next.prev;\n      elt.next.prev = elt;\n      if (elt.prev)\n        elt.prev.next = elt;\n    }\n    if (self._first === null || self._first === elt.next)\n      self._first = elt;\n  },\n  _linkEltOut: function (elt) {\n    var self = this;\n    if (elt.next)\n      elt.next.prev = elt.prev;\n    if (elt.prev)\n      elt.prev.next = elt.next;\n    if (elt === self._last)\n      self._last = elt.prev;\n    if (elt === self._first)\n      self._first = elt.next;\n  },\n  putBefore: function (key, item, before) {\n    var self = this;\n    if (self._dict[self._k(key)])\n      throw new Error(\"Item \" + key + \" already present in OrderedDict\");\n    var elt = before ?\n          element(key, item, self._dict[self._k(before)]) :\n          element(key, item, null);\n    if (elt.next === undefined)\n      throw new Error(\"could not find item to put this one before\");\n    self._linkEltIn(elt);\n    self._dict[self._k(key)] = elt;\n    self._size++;\n  },\n  append: function (key, item) {\n    var self = this;\n    self.putBefore(key, item, null);\n  },\n  remove: function (key) {\n    var self = this;\n    var elt = self._dict[self._k(key)];\n    if (elt === undefined)\n      throw new Error(\"Item \" + key + \" not present in OrderedDict\");\n    self._linkEltOut(elt);\n    self._size--;\n    delete self._dict[self._k(key)];\n    return elt.value;\n  },\n  get: function (key) {\n    var self = this;\n    if (self.has(key))\n        return self._dict[self._k(key)].value;\n    return undefined;\n  },\n  has: function (key) {\n    var self = this;\n    return _.has(self._dict, self._k(key));\n  },\n  // Iterate through the items in this dictionary in order, calling\n  // iter(value, key, index) on each one.\n\n  // Stops whenever iter returns OrderedDict.BREAK, or after the last element.\n  forEach: function (iter) {\n    var self = this;\n    var i = 0;\n    var elt = self._first;\n    while (elt !== null) {\n      var b = iter(elt.value, elt.key, i);\n      if (b === OrderedDict.BREAK)\n        return;\n      elt = elt.next;\n      i++;\n    }\n  },\n  first: function () {\n    var self = this;\n    if (self.empty())\n      return undefined;\n    return self._first.key;\n  },\n  firstValue: function () {\n    var self = this;\n    if (self.empty())\n      return undefined;\n    return self._first.value;\n  },\n  last: function () {\n    var self = this;\n    if (self.empty())\n      return undefined;\n    return self._last.key;\n  },\n  lastValue: function () {\n    var self = this;\n    if (self.empty())\n      return undefined;\n    return self._last.value;\n  },\n  prev: function (key) {\n    var self = this;\n    if (self.has(key)) {\n      var elt = self._dict[self._k(key)];\n      if (elt.prev)\n        return elt.prev.key;\n    }\n    return null;\n  },\n  next: function (key) {\n    var self = this;\n    if (self.has(key)) {\n      var elt = self._dict[self._k(key)];\n      if (elt.next)\n        return elt.next.key;\n    }\n    return null;\n  },\n  moveBefore: function (key, before) {\n    var self = this;\n    var elt = self._dict[self._k(key)];\n    var eltBefore = before ? self._dict[self._k(before)] : null;\n    if (elt === undefined)\n      throw new Error(\"Item to move is not present\");\n    if (eltBefore === undefined) {\n      throw new Error(\"Could not find element to move this one before\");\n    }\n    if (eltBefore === elt.next) // no moving necessary\n      return;\n    // remove from its old place\n    self._linkEltOut(elt);\n    // patch into its new place\n    elt.next = eltBefore;\n    self._linkEltIn(elt);\n  },\n  // Linear, sadly.\n  indexOf: function (key) {\n    var self = this;\n    var ret = null;\n    self.forEach(function (v, k, i) {\n      if (self._k(k) === self._k(key)) {\n        ret = i;\n        return OrderedDict.BREAK;\n      }\n      return undefined;\n    });\n    return ret;\n  },\n  _checkRep: function () {\n    var self = this;\n    _.each(self._dict, function (k, v) {\n      if (v.next === v)\n        throw new Error(\"Next is a loop\");\n      if (v.prev === v)\n        throw new Error(\"Prev is a loop\");\n    });\n  }\n\n});\nOrderedDict.BREAK = {\"break\": true};\n"]}